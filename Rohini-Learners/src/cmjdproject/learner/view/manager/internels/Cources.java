/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package cmjdproject.learner.view.manager.internels;

import cmjdproject.learner.controller.CourceController;
import cmjdproject.learner.models.CourcesMod;
import cmjdproject.learner.other.SortJTable;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author oshanz
 */
public class Cources extends javax.swing.JInternalFrame {

    private DefaultTableModel defaultTableModel;
    private int count = 0;
    private int rows;

    /**
     * Creates new form Cources
     */
    public Cources() {
        // count=1;
        initComponents();
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setResizable(false);

        defaultTableModel = (DefaultTableModel) courceTable.getModel();

        load();
        new SortJTable().sort(courceTable);


    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        courceTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setClosable(true);
        setMaximizable(true);

        courceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cource", "Payment"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        courceTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                courceTableMouseReleased(evt);
            }
        });
        courceTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                courceTableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(courceTable);

        jButton1.setText("Update");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("ReLoad");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:

        for (int i = 0; i < count; i++) {
            defaultTableModel.removeRow(0);
        }
        count = 0;
        load();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int showConfirmDialog = JOptionPane.showConfirmDialog(this, "Are you Sure to Update Informations ? ", "Confirm Update", JOptionPane.YES_NO_OPTION);

        if (showConfirmDialog == 0) { ///ok(skip)
            update();
        } else if (showConfirmDialog == 1) {//try
            dispose();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void courceTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_courceTableKeyReleased
        // TODO add your handling code here:
        // courceTable.getCellEditor().addCellEditorListener(courceTable);
        if (courceTable.getEditorComponent() != null) {
            if (courceTable.isEditing()) {
                jButton1.setEnabled(false);
            } else {
                jButton1.setEnabled(true);
            }
        } else {
            jButton1.setEnabled(true);
        }
    }//GEN-LAST:event_courceTableKeyReleased

    private void courceTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_courceTableMouseReleased
        // TODO add your handling code here:
        if (courceTable.getEditorComponent() != null) {
            if (courceTable.isEditing()) {
                jButton1.setEnabled(false);
            } else {
                jButton1.setEnabled(true);
            }
        } else {
            jButton1.setEnabled(true);
        }
    }//GEN-LAST:event_courceTableMouseReleased
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable courceTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private void load() {

        try {
            List<CourcesMod> list = CourceController.viewCources();

            for (CourcesMod courcesMod : list) {
                Object[] row = new Object[]{courcesMod.getCource(), courcesMod.getPayment()};
                defaultTableModel.addRow(row);
                count += 1;
            }
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage() + " Error, Try Again ");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage() + " Error, Try Again ");
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage() + " Error, Try Again ");
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage() + " Error, Try Again ");
        }
    }

    private void update() {


        List<CourcesMod> courceslist = new ArrayList<CourcesMod>();


        rows = defaultTableModel.getRowCount();
        for (int i = 0; i < rows; i++) {
            String name = (String) defaultTableModel.getValueAt(i, 0);
            double price = Double.parseDouble(defaultTableModel.getValueAt(i, 1) + "");
            // System.out.println(name+" "+price);
            CourcesMod module = new CourcesMod(null, name, price);
            courceslist.add(module);
        }
        try {
            boolean b = CourceController.updateInfo(courceslist);
            if (b) {
                JOptionPane.showMessageDialog(this, "Done");
            } else {
                JOptionPane.showMessageDialog(this, "Error, Try Again");
            }
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage() + " Error, Try Again ");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage() + " Error, Try Again ");
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage() + " Error, Try Again ");
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage() + " Error, Try Again ");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage() + " Error, Try Again ");
        }

    }
}
